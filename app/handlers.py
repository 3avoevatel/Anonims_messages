
from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
import sqlite3


broadcast_text = ""
broadcast_photo = ""

def db_init():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    conn.commit()
    conn.close()

db_init()

my_router = Router()

user_states = {}

def add_user_to_db(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def get_user_count():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    count = cursor.fetchone()[0]
    conn.close()
    return count

@my_router.message(CommandStart())
async def cmd_start(message: Message):
    referral_id = str(message.from_user.id)
    args = message.text.split()[1:]

    add_user_to_db(message.from_user.id)

    if args:
        referral_id_arg = args[0]
        await message.answer(f'üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {referral_id_arg}):')
        user_states[message.from_user.id] = referral_id_arg
    else:
        await message.reply(f'üíå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\nüîó https://t.me/uwu_code_test_bot?start={referral_id}\n'
                            f' \nüí¨ –ö–∞–∂–¥—ã–π, –∫—Ç–æ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –Ω–µ–π, —Å–º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
                            reply_markup=kb.main)

@my_router.message(lambda msg: msg.text == 'üîó–°—Å—ã–ª–∫–∞')
async def anon_mess(message: Message):
    await message.reply('üíå –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É —É —Å–µ–±—è –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö:\n'
                        f'üîó https://t.me/uwu_code_test_bot?start={message.from_user.id}')

@my_router.message(lambda msg: msg.text == '–∞–¥–º')
async def admin_panel(message: Message):
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        await message.reply('üëÆ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.admin_panel)
    else:
        return


@my_router.message(lambda message: message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    await message.reply(f'‚ÑπÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n'
                        f'\n'
                        f'- –ù–∏–∫–Ω–µ–π–º: {message.from_user.first_name} | @{message.from_user.username} \n')
@my_router.callback_query(lambda cb: cb.data == 'say_broadcast')
async def send_broadcast(callback_query: CallbackQuery):
    user_count = get_user_count()
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id = user[0]
        try:
            if broadcast_photo and broadcast_text:
                await callback_query.message.bot.send_photo(user_id, broadcast_photo, caption=broadcast_text)
            elif broadcast_text:
                await callback_query.message.bot.send_message(user_id, broadcast_text)
            elif broadcast_photo:
                await callback_query.message.bot.send_photo(user_id, broadcast_photo)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await callback_query.answer(f'üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!')

@my_router.callback_query(lambda cb: cb.data == 'set_bc_text')
async def set_broadcast_text(callback_query: CallbackQuery):
    await callback_query.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@my_router.callback_query(lambda cb: cb.data == 'set_bc_photo')
async def set_broadcast_photo(callback_query: CallbackQuery):
    await callback_query.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@my_router.message(lambda message: message.text)
async def receive_broadcast_text(message: types.Message):
    global broadcast_text
    broadcast_text = message.text
    await message.reply("‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@my_router.message(lambda message: message.photo)
async def receive_broadcast_photo(message: types.Message):
    global broadcast_photo
    broadcast_photo = message.photo[-1].file_id
    await message.reply("‚úÖ –§–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")


@my_router.message(lambda message: message.text)
async def receive_broadcast_text(message: types.Message):
    global broadcast_text
    broadcast_text = message.text
    await message.reply("‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@my_router.message(lambda message: message.photo)
async def receive_broadcast_photo(message: types.Message):
    global broadcast_photo
    broadcast_photo = message.photo[-1].file_id
    await message.reply("‚úÖ –§–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")


@my_router.message()
async def handle_message_to_user(message: Message):
    referral_user_id = user_states.get(message.from_user.id)
    if referral_user_id:
        await message.reply('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')

        await message.bot.send_message(referral_user_id, f'üí¨ –¢–µ–±–µ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \n_\n{message.text}_',
                                       parse_mode='MarkdownV2')
        del user_states[message.from_user.id]
    else:
        await message.reply('‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —á–µ–π-—Ç–æ —Å—Å—ã–ª–∫–µ')


@my_router.callback_query(lambda cb: cb.data == 'get_users')
async def get_users_count(callback: CallbackQuery):
    user_count = get_user_count()
    await callback.answer(f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—Ç–∞: {user_count}')

